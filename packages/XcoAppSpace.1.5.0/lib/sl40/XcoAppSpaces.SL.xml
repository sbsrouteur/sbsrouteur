<?xml version="1.0"?>
<doc>
  <assembly>
    <name>XcoAppSpaces.SL</name>
  </assembly>
  <members>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoService">
      <summary>
            Interface for services that can be used by an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoService.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the services. Hands over the service registry, so the service can get access 
            to other services of the appspace instance, if it needs to.
            </summary>
      <param name="serviceRegistry">The service registry of the current appspace instance.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoStatefulService">
      <summary>
            Interface for stateful services that can be used by an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoStatefulService.Start">
      <summary>
            Starts the service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoStatefulService.Stop">
      <summary>
            Stops the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoStatefulService.StartPriority">
      <summary>
            StartPriority for the service (services with a low priority are started first, e.g. priority 1 comes before priority 5).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService">
      <summary>
            Service that gives access to the Ccr Dispatcher and DispatcherQueue of an appspace instance.
            The service can be used by other services of the space to get access to the space's
            Dispatcher and DispatcherQueue. To provide the possiblity of having seperated processing
            of normal worker tasks and appspace-internal tasks (like sending messages or resolving workers)
            two different dispatcher queues are available.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService.Dispatcher">
      <summary>
            The Ccr Dispatcher.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService.DispatcherQueue">
      <summary>
            The Ccr DispatcherQueue used for Worker Tasks.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService.InternalDispatcherQueue">
      <summary>
            The Ccr DispatcherQueue used for AppSpace-internal tasks.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask">
      <summary>
            Interface definition for a remotable ccr task (a ccr task that can send messages to a remote ccr port or portset).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.Send(System.Object,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Directly sends the given item using the tasks remote address and transport service name.
            </summary>
      <param name="item">The item to be sent.</param>
      <param name="commErrorPort">Optional port where communication errors should be posted back.</param>
      <param name="commAckPort">Optional port where communication ACK should be posted back.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.RemoteAddress">
      <summary>
            The remote address of the original port or portset.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.CommServiceName">
      <summary>
            The name of the transport service that should be used to send messages.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.PortGuid">
      <summary>
            The id of the original port or portset.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers">
      <summary>
            This class adds extension methods to the port that are needed at the appspace for working with local and remote ports.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageType(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets the message type of a port.
            </summary>
      <param name="port">The port.</param>
      <returns>The type of messages that can be posted to the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageTypes(Microsoft.Ccr.Core.IPortSet)">
      <summary>
            Gets the message types of a portset.
            </summary>
      <param name="portSet">The portset.</param>
      <returns>The types of messages that can be posted to the portset.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetPortInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets infos that are available for this port about remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about this port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.UnregisterAllReceiverTasks(Microsoft.Ccr.Core.IPort)">
      <summary>
            Unregisters all receiver tasks from the port.
            </summary>
      <param name="port">The port.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetRemotableTask(Microsoft.Ccr.Core.IPort)">
      <summary>
            If the port is a remote port, returns the remotable task that is registered at the port.
            Null is returned if the port is not a remote port.
            </summary>
      <param name="port">The port.</param>
      <returns>The remotable task, if the port is a remote port, otherwise null</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageType(System.Type)">
      <summary>
            Gets the message type from a given type that inherits from Port
            </summary>
      <param name="portType">The port type</param>
      <returns>The message type of the port, or null if no message type could be found</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageTypes(System.Type)">
      <summary>
            Gets the message type from a given type that inherits from any of the PortSet types
            </summary>
      <param name="portSetType">The port set type.</param>
      <returns>The message types of the portset, or null if no message types could be found.</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo">
      <summary>
            Infomation about a Port concerning remote communication.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.#ctor(System.Boolean,System.String,System.String,System.Guid)">
      <summary>
            Creates a new XcoPortInfo.
            </summary>
      <param name="isRemotePort">True if the port is a remote port.</param>
      <param name="remoteAddress">The remote address where the port is hosted, or null if the port is local.</param>
      <param name="commServiceName">The name of the transport service that the port uses, or null if the port is local.</param>
      <param name="remotePortID">The id of the port, or Guid.Empty if the port is local.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.IsRemotePort">
      <summary>
            True if the port is a remote port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.RemoteAddress">
      <summary>
            The remote address where the port is hosted, or null if the port is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.RemotePortID">
      <summary>
            The id of the port, or Guid.Empty if the port is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.CommServiceName">
      <summary>
            The name of the transport service that the port uses, or null if the port is local.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer">
      <summary>
            Service for wiring workers, worker proxies and remote ports with the Ccr
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.CreateWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Creates a new Worker and wires the worker ports with the message handlers contained in the worker class.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker.</typeparam>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.WireWorker``1(``0,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Wires a given worker's ports with its message handlers.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="worker">The worker instance.</param>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.UnwireWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Removes all registered receiver tasks from all ports of the worker.
            </summary>
      <param name="worker">The worker that should be unwired.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.CreateWorkerProxy``1(XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo)">
      <summary>
            Creates a worker proxy for a remote worker from the given parameters.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker (must have an empty constructor so it can be instantiated as a proxy).</typeparam>
      <param name="proxyInfo">Information that is needed to create the worker proxy, like name and address of the worker.</param>
      <returns>The created worker proxy.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets a serialization info object that contains all information that is needed by the receiving space
            to deserialize the worker. The current serialization context can be used to get the local adress, and
            to register the port at the local space and get a unique id for the port, if it is not already
            a remote port.
            </summary>
      <param name="port">The port to be serialized.</param>
      <returns>Object containing the info that must be sent to the remote space for deserialization of the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.WireRemotePort(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo)">
      <summary>
            Wires a port using the given serialization info, so that it is ready for remote communication. The
            current serialization context can be used to get the name of the communication service that should be
            used to send messages to the original port.
            </summary>
      <param name="port">The port to be wired.</param>
      <param name="portSerializationInfo">Info that is needed for wiring the remote port, like the port's id and remote address.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1">
      <summary>
            Class that contains information about a worker that is acquired during creation an wiring
            of the worker.
            </summary>
      <typeparam name="T">The contract type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.#ctor(`0,System.Collections.Generic.List{XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo},System.Collections.Generic.Dictionary{System.Type,XcoAppSpaces.Core.XcoProcessorAttribute})">
      <summary>
            Creates a new WorkerInfo.
            </summary>
      <param name="instance">The worker instance.</param>
      <param name="serviceAttributes">List of attributes that are assigned to the worker and could be of interest to other services of the space.</param>
      <param name="processorAttributes">List of attributes of the processors of this worker.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.Instance">
      <summary>
            The worker instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.ServiceAttributes">
      <summary>
            List of attributes that are assigned to the worker and could be of interest to other services of the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.ProcessorAttributes">
      <summary>
            List of attributes of the processors of this worker.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo">
      <summary>
            Infomation about a Port or PortSet concerning serialization.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.#ctor">
      <summary>
            Creates a new XcoPortSerializationInfo.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.#ctor(System.String,System.Guid)">
      <summary>
            Creates a new XcoPortSerializationInfo.
            </summary>
      <param name="remoteAddress">The remote address of the port.</param>
      <param name="remotePortGuid">The id of the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.MakeRemote(System.String,System.Guid)">
      <summary>
            Adds remote information to the given XcoPortSerializationInfo.
            </summary>
      <param name="remoteAddress">The remote address of the port.</param>
      <param name="remotePortGuid">The id of the port.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.RemoteAddress">
      <summary>
            The remote address of the port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.RemotePortGuid">
      <summary>
            The id of the port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.IsRemote">
      <summary>
            True if the XcoPortSerializationInfo contains remote information (remote address and port id).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.ICommunicationEvents">
      <summary>
            Events giving information about incoming and outgoing communication, e.g. for monitoring
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Communication.ICommunicationEvents.OnSendingMessage">
      <summary>
            Event that is triggered before a message is sent. Contains the serialized message parts, address and name of the transport service.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Communication.ICommunicationEvents.OnMessageReceived">
      <summary>
            Event that is triggered after a message has been received. Contains the serialized message parts, address and name of the transport service.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Communication.ICommunicationEvents.OnWorkerResolved">
      <summary>
            Event that is triggered when a request from a remote space is received to resolve a local worker, which is the case when "ConnectWorker"
            is called on the remote space. Contains information about who sent the resolve request, the identifier of the worker that should be resolved
            and the result which will be sent to the remote space.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.MessageEventArgs">
      <summary>
            Event args for message events.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.MessageEventArgs.Message">
      <summary>
            The message that is being sent or received, in serialized state.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.MessageEventArgs.Address">
      <summary>
            The address where the message is sent / from where it has been received.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.MessageEventArgs.TransportServiceName">
      <summary>
            The name of the used transport service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.WorkerResolveEventArgs">
      <summary>
            Event args for the OnWorkerResolved event.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.WorkerResolveEventArgs.WorkerIdentifier">
      <summary>
            The identifier of the worker (built from workertype/workername) that should be resolved.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.WorkerResolveEventArgs.RemoteAddress">
      <summary>
            The address of the space that sent the resolve request.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.WorkerResolveEventArgs.Result">
      <summary>
            The result that will be sent.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.IConnector">
      <summary>
            Service for connecting to remote workers and handling the space's transport services, as well as communication errors.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.IsLocal(System.String)">
      <summary>
            Checks a certain address if it is the address of the local space. This is the case if the
            address is either NULL of if it is equal (ignoring case) to the local address.
            </summary>
      <param name="address">The address to be checked.</param>
      <returns>True if the address refers to the local space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.ConnectWorker``1(System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Returns information that
            can be used to generate proxy of the worker that allows posting messages that are automatically 
            transported to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="workerAddress">The address of the worker in den form "address/workername"</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>Information about the worker that can be used to generate a proxy to communicate with this worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.ConnectWorker``1(System.String,System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Returns information that
            can be used to generate proxy of the worker that allows posting messages that are automatically 
            transported to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="name">The name of the worker.</param>
      <param name="address">The address of the space where the worker is running (in form hostname:port).</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>Information about the worker that can be used to generate a proxy to communicate with this worker.</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.LocalAddress">
      <summary>
            The local address of the space (in form hostname:port).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.CommServices">
      <summary>
            The list of registered communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.Errors">
      <summary>
            Port where communication errors are posted that are not caught by causalities.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.CommunicationEvents">
      <summary>
            Events giving information about incoming and outgoing communication, e.g. for monitoring
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.XcoCommunicationError">
      <summary>
            Description for an error that occurred during communication (serialization, 
            send/receive, deserialization).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.#ctor">
      <summary>
            Creates a new XcoCommunicationError.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.#ctor(System.Exception,System.String,System.String)">
      <summary>
            Creates a new XcoCommunicationError.
            </summary>
      <param name="error">The exception that has been thrown.</param>
      <param name="info">Additional info to the error.</param>
      <param name="sourceAddress">The address of the space where the error occurred.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.Error">
      <summary>
            The exception that has been thrown.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.Info">
      <summary>
            Additional info to the error.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.SourceAddress">
      <summary>
            The address of the space where the error occurred.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.IXcoLogger">
      <summary>
            Interface definition for Class used for Logging in the appspace. Defines methods
            for all needed message severity levels.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Debug(System.String)">
      <summary>
            Logs a debug message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Info(System.String)">
      <summary>
            Logs an Info message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Warn(System.String)">
      <summary>
            Logs a warning message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Error(System.String)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Error(System.String,System.Exception)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Fatal(System.String)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Fatal(System.String,System.Exception)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.Ack">
      <summary>
            Acknowledge for successful message transfer.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.Ack.#ctor(System.DateTime)">
      <summary>
            Creates a new Ack.
            </summary>
      <param name="date">The date when the message has been transferred.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.Ack.Date">
      <summary>
            The date when the message has been transferred.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.CausalityContext">
      <summary>
            Context information that can be sent together with a message
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.CausalityContext.#ctor">
      <summary>
            Creates a new CausalityContext.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.CausalityContext.#ctor(XcoAppSpaces.Contracts.Messaging.CausalityInfo[])">
      <summary>
            Creates a new CausalityContext.
            </summary>
      <param name="causalities">List of causalities that should be installed for processing the message.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.CausalityContext.Causalities">
      <summary>
            List of causalities that should be installed for processing the message.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.CausalityInfo">
      <summary>
            Information about a causality
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.CausalityInfo.#ctor">
      <summary>
            Creates a new CausalityInfo.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.CausalityInfo.#ctor(Microsoft.Ccr.Core.ICausality)">
      <summary>
            Creates a new CausalityInfo.
            </summary>
      <param name="c">The causality from which the relevant information should be taken.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.CausalityInfo.Name">
      <summary>
            The name of the causality.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.CausalityInfo.ExceptionPort">
      <summary>
            The exception port of the causality.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.CausalityInfo.CoordinationPort">
      <summary>
            The coordinatio port of the causality.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.MessageToSend">
      <summary>
            Provides information about a message to be sent.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.MessageToSend.#ctor(System.String,System.String,XcoAppSpaces.Contracts.Messaging.CausalityContext,XcoAppSpaces.Contracts.Messaging.RemoteMessage,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.Port{XcoAppSpaces.Contracts.Messaging.Ack})">
      <summary>
            Creates a new MessageToSend.
            </summary>
      <param name="remoteAddress">The address of the space the message should be sent to.</param>
      <param name="commServiceName">The name of the transport service that should be used to send the message.</param>
      <param name="context">The causality context of the message.</param>
      <param name="data">The messsage to be sent.</param>
      <param name="commErrorPort">Optional port for communication errors.</param>
      <param name="commAckPort">Optional port for communication ACK.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.RemoteAddress">
      <summary>
            The address of the space the message should be sent to.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.CommServiceName">
      <summary>
            The name of the transport service that should be used to send the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.Context">
      <summary>
            The causality context of the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.Data">
      <summary>
            The messsage to be sent.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.CommErrorPort">
      <summary>
            Optional port for posting back communication errors. If this port is set, then not the causality
            will be used for communication errors, but this port. This is e.g. used when using Send() instead
            of Post().
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.MessageToSend.CommAckPort">
      <summary>
            Optional port for posting back ack when the message has been successfullly sent. If this port 
            is set, then not the causality coordination port will be used for ack, but this port. This
            is e.g. used when using Send() instead of Post() to prevent the need of installing a causality
            just for the ACK functionality.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.RemoteMessage">
      <summary>
            Base definition for remote messages
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.RemoteMessage.#ctor(System.Object)">
      <summary>
            Creates a new RemoteMessage.
            </summary>
      <param name="msg">The message data.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.RemoteMessage.Msg">
      <summary>
            The message data.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.RemotePortMessage">
      <summary>
            Message that is sent to a remote port.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.RemotePortMessage.#ctor">
      <summary>
            Creates a new RemotePortMessage.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.RemotePortMessage.#ctor(System.Guid,System.Object)">
      <summary>
            Creates a new RemotePortMessage.
            </summary>
      <param name="portID">The id of the port.</param>
      <param name="msg">The message data.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.RemotePortMessage.ToString">
      <summary>
            Returns a string representation of the RemotePortMessage.
            </summary>
      <returns>A string representation of the RemotePortMessage</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.RemotePortMessage.PortID">
      <summary>
            The id of the port.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.SerializationContext">
      <summary>
            Provides thread-based context information needed for serialization and deserialization of ports and portsets.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.SerializationContext.RegisterPort(Microsoft.Ccr.Core.IPort)">
      <summary>
            Registers a port at the local space instance, and assigns a unique id to this port.
            This allows remote space instances to send messages to this port, if they know its id. 
            </summary>
      <param name="port">The port to be registered.</param>
      <returns>Unique id that has been assigned to the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.SerializationContext.Dispose">
      <summary>
            Disposes the SerializationContext and removes it from the current thread.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.SerializationContext.Current">
      <summary>
            The serialization context for the current thread.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.SerializationContext.MessageProcessor">
      <summary>
            Delegate that can be used to send messages to remote space instances.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.SerializationContext.LocalAddress">
      <summary>
            The local space address.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.SerializationContext.CurrentCommServiceName">
      <summary>
            The name of the communication service where the message is sent/received.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.WorkerMessage">
      <summary>
            Message that is sent to a remote worker.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.WorkerMessage.#ctor">
      <summary>
            Creates a new WorkerMessage.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.WorkerMessage.#ctor(System.String,System.Guid,System.Object)">
      <summary>
            Creates a new WorkerMessage.
            </summary>
      <param name="workerIdentifier">Identifier of the worker, built out of the worker's type and name.</param>
      <param name="sessionID">The session id needed for authentication.</param>
      <param name="msg">The message data.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.WorkerMessage.ToString">
      <summary>
            Returns a string representation of the WorkerMessage.
            </summary>
      <returns>A string representation of the WorkerMessage</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerMessage.WorkerIdentifier">
      <summary>
            Identifier for the worker, built from workertype/workername.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerMessage.SessionID">
      <summary>
            The session id needed for authentication.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo">
      <summary>
            Information about a worker that is needed to create a worker proxy.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.#ctor">
      <summary>
            Creates a new WorkerProxyInfo.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.#ctor(System.Type,System.String,System.String,System.String,System.String,System.Guid,System.Collections.Generic.Dictionary{System.Type,XcoAppSpaces.Core.XcoProcessorAttribute},Microsoft.Ccr.Core.Handler{XcoAppSpaces.Contracts.Messaging.MessageToSend})">
      <summary>
            Creates a new WorkerProxyInfo.
            </summary>
      <param name="contractType">The contract type of the worker.</param>
      <param name="name">The name of the worker.</param>
      <param name="address">The address of the space where the worker is hosted.</param>
      <param name="identifier">Identifier of the worker, built out of the worker's type and name.</param>
      <param name="commServiceName">The name of the transport service that should be used to send messages to the worker.</param>
      <param name="sessionID">The id of the session that should be used to communicate with the worker.</param>
      <param name="processorAttributes">List of attributes of the processors of this worker.</param>
      <param name="messageProcessor">Method that takes messages that should be sent from the proxy.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.ContractType">
      <summary>
            The contract type of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.WorkerName">
      <summary>
            The name of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.WorkerAddress">
      <summary>
            The address of the space where the worker is hosted.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.WorkerIdentifier">
      <summary>
            The address of the space where the worker is hosted.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.CommServiceName">
      <summary>
            The name of the transport service that should be used to send messages to the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.SessionID">
      <summary>
            The id of the session that should be used to communicate with the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.ProcessorAttributes">
      <summary>
            List of attributes of the processors of this worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo.MessageProcessor">
      <summary>
            Method that takes messages that should be sent from the proxy.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.IXcoClientCredentials">
      <summary>
            Credentials that can be used to authenticate a user.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.IXcoClientCredentials.User">
      <summary>
            The username.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.IXcoClientCredentials.Password">
      <summary>
            The (encrypted) password.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.IXcoSecurityService">
      <summary>
            Interface 
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.GetClientCredentials(System.Net.ICredentials,System.String)">
      <summary>
            Gets xco client credentials from a given credentials object and for the given address, that can be 
            transfered to a remote space and used to authenticate a user at a remote space.
            </summary>
      <param name="credentials">The ICredentials object where to read the credentials from.</param>
      <param name="address">The address for which the credentials are needed.</param>
      <returns>A new IXcoClientCredentials instance containing the needed authentication information.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.Authenticate(System.String,XcoAppSpaces.Contracts.Security.IXcoClientCredentials)">
      <summary>
            Authenticates access for the given user to the space. It is checked if the username and password
            are valid. A sessionID is generated if authentication is successful. If the user already has an open
            session, the id of the existing session is returned.
            </summary>
      <param name="address">The host address of the user.</param>
      <param name="credentials">The credentials of the user.</param>
      <returns>The result of the authentication, including the Guid of the user session if it was successful.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.Authorize(System.String,System.Guid,Microsoft.Ccr.Core.IPort)">
      <summary>
            Authorizes access for the user of the given session to the given worker. Authorization is successful
            if the user is allowed to access at least one port of the worker.
            </summary>
      <param name="address">The host address of the user.</param>
      <param name="sessionID">The sessionID of the user (that was generated during user authentication).</param>
      <param name="worker">The worker instance.</param>
      <returns>True if the user is authorized to access the worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.CheckPermission(Microsoft.Ccr.Core.IPort,System.Object,System.String,System.Guid)">
      <summary>
            Checks if certain port of a worker can be accessed by a specific session. An XcoSecurityException is thrown
            if the operation is not permitted.
            </summary>
      <param name="worker">The worker that should be accessed.</param>
      <param name="message">The message that should be posted to the worker.</param>
      <param name="address">The address ot the sender of the message.</param>
      <param name="sessionID">The ID of the session that the sender uses for communication.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.GetUsername(System.Guid)">
      <summary>
            Gets the username for the given session id.
            </summary>
      <param name="sessionID">The id of the session for which the user should be retrieved.</param>
      <returns>The username for the given session, or null if no user is applied to this session.</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult">
      <summary>
            Result of an authentication with an IXcoSecurityService instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult.IsAuthenticated">
      <summary>
            True if the authentication was successful (meaning username and password were correct).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult.SessionID">
      <summary>
            The session id that the user must use to access the worker.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceAttribute">
      <summary>
            Base class for attributes that can be added to Workers (and/or their Methods/Fields)
            and should be recognized when instantiating a worker because a service
            needs them (e.g. security service).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute">
      <summary>
            Attribute that can be added to a worker or one of its message processor methods or worker extensions to
            allow a certain role to access this worker (or only certain ports of the worker).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute.#ctor(System.String)">
      <summary>
            Creates a new XcoSecurityPermissionAttribute.
            </summary>
      <param name="rolename">The rolename that should have permission.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute.Rolename">
      <summary>
            The rolename that should have permission.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy">
      <summary>
            List of security policies for handling remote access to workers.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy.Permissive">
      <summary>
            Anonymous users are allowed (can access all workers/ports that are not restricted to certain roles).
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy.Restrictive">
      <summary>
            No anonymous users are allowed.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Serialization.IXcoSerializer">
      <summary>
            Interface definition for classes used for serialization and deserialization of 
            objects (used for remote communication and for serialized data storage).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Serialization.IXcoSerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Serialization.IXcoSerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Serialization.IXcoSerializer.CanTypeBeSerialized(System.Type,System.String@)">
      <summary>
            Checks if the given type can be serialized. This method is called for every
            message type in the worker contract when connecting to a worker, so that any
            exceptions due to potential serialization problems can be thrown to the user.
            </summary>
      <param name="type">The type to be checked.</param>
      <param name="errorInfo">Contains information about serialization problems, if the type cannot be serialized.</param>
      <returns>True if the type can be serialized, otherwise false.</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoConfigStringInterpreter">
      <summary>
            Interface for classes that are able to interpret a space configuration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoConfigStringInterpreter.Interpret(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Interprets the given configuration string and, according to the configuration string elements,
            alters the space configuration (e.g. by adding new services or altering the configuration of already
            added services).
            </summary>
      <param name="configStringElements">Dictionary of configuration elements (key-value pairs)</param>
      <returns>Configuration for the service</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoConfigStringInterpreter.InterpretKeys">
      <summary>
            Returns a list of the keys that can be understood by this interpreter.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2">
      <summary>
            Interface that is implemented by classes allowing fluent service configuration. Allows
            service implementations to extend the configuration of their own service with additional
            extension methods.
            </summary>
      <typeparam name="TService">The type of service that is getting configured.</typeparam>
      <typeparam name="TConfig">The type of configuration object that should be returned for further configuration with the fluent interface.</typeparam>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2.Service">
      <summary>
            The service that is getting configured.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2.FluentConfig">
      <summary>
            The configuration object that should be returned for further configuration with the fluent interface.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry">
      <summary>
            The service registry contains all services of a space instance and can initialize, start and stop
            its services.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Resolve``1">
      <summary>
            Gets the service with the given type from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <returns>The resolved service instance, or null if no instance could be found.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Resolve``1(System.String)">
      <summary>
            Gets the service with the given type and name from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="name">The name of the service.</param>
      <returns>The resolved service instance, or null if no instance could be found.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.ResolveAll``1">
      <summary>
            Gets all services with the given type from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <returns>List of all services including their configuration data.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Register``1(``0)">
      <summary>
            Registers a new service at the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="service">The service instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Register(XcoAppSpaces.Contracts.Service.XcoServiceConfiguration)">
      <summary>
            Registers a new service at the registry.
            </summary>
      <param name="service">The service to be added.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.InitializeServices">
      <summary>
            Initializes all services in the registry, by calling their Initialize methods.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.StartServices">
      <summary>
            Starts all stateful services in the registry by calling their Start methods (in the order 
            according to the start priority of the services).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.StopServices">
      <summary>
            Stops all stateful services in the registry by calling their Stop methods.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase">
      <summary>
            Basic interpreter for service config strings
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.Interpret(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Interprets the given configuration string and, according to the configuration string elements, creates
            an XcoServiceConfiguration instance if needed config string elements are present.
            </summary>
      <param name="configStringElements">Dictionary of configuration elements (key-value pairs)</param>
      <returns>Configuration for the service</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.ServiceConfig">
      <summary>
            Configuration of the service
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.InterpretDefinition">
      <summary>
            The interpret definition for all config strings 
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.GetService">
      <summary>
            Get serviceinstance
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.InterpretKeys">
      <summary>
            Returns a list of the keys that can be understood by this interpreter.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo">
      <summary>
            Information about a service attribute that belongs to a certain worker or one of its message processor methods.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo.Attr">
      <summary>
            The attribute instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo.WorkerMessageType">
      <summary>
            The message type the given attribute was assigned to, or null if the attribute belongs to the worker directly.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration">
      <summary>
            Configuration for an IXcoService instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.AddMapping``1(System.String)">
      <summary>
            Adds a mapping for the given service type.
            </summary>
      <typeparam name="T">The service type.</typeparam>
      <returns>Mapping for the given type.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.GetMapping``1">
      <summary>
            Gets the mapping name that is registered for the given service type, or null of no mapping exists.
            </summary>
      <typeparam name="T">The service type.</typeparam>
      <returns>Mapping for the given type.</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.Name">
      <summary>
            The name of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.IsDefault">
      <summary>
            True if the service is a default service. (E.g. default communication service which
            is used as default by the space if no other communication service is chosen)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.Service">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.ServiceType">
      <summary>
            The type of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.Mappings">
      <summary>
            Explicit mappings to other services. Meaning of the mappings depends on the type of the service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration`1">
      <summary>
            Configuration for an IXcoService instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration`1.#ctor">
      <summary>
            Creates a new XcoServiceConfiguration.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration`1.Service">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.MessageReceivedDelegate">
      <summary>
            Delegate definition for event that is raised by a transport service when a message is received.
            </summary>
      <param name="msg">The received message.</param>
      <param name="remoteAddress">The address from which the message was received.</param>
      <param name="commService">The transport service that received the message.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.IXcoTransportService">
      <summary>
            Interface definition for Services that can be used for communication between application spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Transport.IXcoTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage,System.String)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The messages that should be sent.</param>
      <param name="remoteAddress">The address of the space where the message should be sent.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.IXcoTransportService.LocalAddress">
      <summary>
            The address of the server.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Transport.IXcoTransportService.OnMessageReceived">
      <summary>
            Event that is raised when a message is received.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.XcoMessage">
      <summary>
            Interface definition for a message to be sent by remote communication.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Transport.XcoMessage.RaiseTransferSuccessfulEvent">
      <summary>
            Method to allow the transport service raising the OnTransferSuccessful event.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Transport.XcoMessage.RaiseTransferFailedEvent(System.Exception)">
      <summary>
            Method to allow the transport service raising the OnTransferFailed event.
            </summary>
      <param name="ex">Exception explaining why the transfer failed.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.CausalityContext">
      <summary>
            The causality context of the message, defining the causalities
            that should be installed for processing the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.Content">
      <summary>
            The content of the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.ContentInfo">
      <summary>
            Info about the message content that can be used for an error message if deserialization fails.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Transport.XcoMessage.OnTransferSuccessful">
      <summary>
            Event that is raised by the transport service when the transfer of the message was successful.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Transport.XcoMessage.OnTransferFailed">
      <summary>
            Event that is raised by the transport service when the transfer of the message failed.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest">
      <summary>
            Message class for a request to resolve a certain worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest.WorkerIdentifier">
      <summary>
            Identifier for the worker, built from workertype/workername.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest.WorkerAddress">
      <summary>
            The address of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest.ID">
      <summary>
            Unique ID of the request, so the returning response can then be mapped.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest.ClientCredentials">
      <summary>
            Security credentials that should be used to authentication and authorization to access the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveRequest.ResponsePort">
      <summary>
            Port where the response should be posted.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse">
      <summary>
            Message class for responding to a request for resolving a certain worker.
            Contains additional information about communicating with the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse.RequestID">
      <summary>
            The id of the request, so the response can be mapped to it.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse.Status">
      <summary>
            The outcome of the requested resolve.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse.SessionID">
      <summary>
            The session id that should be used to communicate with the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse.Error">
      <summary>
            The exception that occurred, when there was a communication error.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.WorkerResolve.ResolveResponse.ProcessorAttributes">
      <summary>
            The processor attributes of the worker per port type, to be used for
            creating the worker proxy (e.g. defines if a worker port runs in sequential
            or parallel transfer mode).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus">
      <summary>
            Status enum for responding to a resolve request.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.Ok">
      <summary>
            The worker resolve was successful.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.WorkerNotFound">
      <summary>
            The worker with the given name, type and address could not be found.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.NotAuthenticated">
      <summary>
            The user could not be authenticated (missing credentials or wrong username/password).
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.NotAuthorized">
      <summary>
            The user doesn't have permission to access the worker.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.CommunicationError">
      <summary>
            There was an error during communication (e.g. the space is not running or cannot not be reached for some other reason).
            (This state is only for local usage where the request was sent.)
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.WorkerResolve.ResolveStatus.NoResponse">
      <summary>
            There was no response to the resolve request (the other space did not answer).
            (This state is only for local usage where the request was sent.)
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.WorkerResolve.ResolveWorkerContract">
      <summary>
            Worker contract for the AppSpace-internal ResolveWorker that allows
            remote spaces to resolve workers.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.WorkerEventHandler">
      <summary>
            Delegate used for events when the worker is added or removed.
            </summary>
      <param name="sender">The IXcoWorkerRegistry instance that triggered the event.</param>
      <param name="workerInfo">Information about the worker that has been added or removed.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry">
      <summary>
            Interface for class that provides access to the registry of local workers. Allows
            to resolve workers, check if a worker exists and register new ones.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Register``1(``0,System.String)">
      <summary>
            Registers a new worker.
            </summary>
      <typeparam name="TContract">The contract type of the worker.</typeparam>
      <param name="instance">The worker instance to be registered.</param>
      <param name="name">The name of the worker (null if the worker doesn't have a name).</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Exists(System.String,System.Boolean,System.Boolean)">
      <summary>
            Checks if a certain worker exists.
            </summary>
      <param name="workerIdentifier">Identifier of the worker, built out of the worker's type and name.</param>
      <param name="onlyPublished">Only search for published workers.</param>
      <param name="connectionRequest">True if the method is called because of a connection request.</param>
      <returns>True if a worker with the given type and name exists.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Resolve(System.String,System.Boolean)">
      <summary>
            Resolves a worker from the registry and returns an info object that contains
            the worker object and further information about the worker.
            </summary>
      <param name="workerIdentifier">Identifier of the worker, built out of the worker's type and name.</param>
      <param name="onlyPublished">Only search for published workers.</param>
      <returns>A worker info object for the worker, if one with the given type and name exists, otherwise null.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Resolve``1(System.String)">
      <summary>
            Resolves a worker from the registry.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
      <returns>The worker instance, if one with the given type and name exists, otherwise null.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.GenerateIdentifier(System.Type,System.String)">
      <summary>
            Generates an identifier string for the given worker type and name.
            </summary>
      <param name="workerType">Worker type.</param>
      <param name="workerName">Worker name (or null, if the worker doesn't have a name).</param>
      <returns>
      </returns>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.WorkerAdded">
      <summary>
            Event that is triggered when a new worker is added to the worker registry.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.WorkerRemoved">
      <summary>
            Event that is triggered when an existing worker is removed form the worker registry.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.PublishMode">
      <summary>
             Defines if a worker should be published so other appspace
             instances can connnect to it
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Worker.PublishMode.Unpublished">
      <summary>
             Worker will no be published, invisible for other spaces.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Worker.PublishMode.Published">
      <summary>
             Worker will be published, so other space instance can connect to it.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo">
      <summary>
            Presents information about a worker in the space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.#ctor(Microsoft.Ccr.Core.IPort,System.Type,System.String,XcoAppSpaces.Contracts.Worker.PublishMode,System.Collections.Generic.List{XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo},System.Collections.Generic.Dictionary{System.Type,XcoAppSpaces.Core.XcoProcessorAttribute},System.Boolean,System.String,System.String,System.String)">
      <summary>
            Creates a new XcoWorkerInfo.
            </summary>
      <param name="instance">The worker instance.</param>
      <param name="contractType">The contract type of the worker.</param>
      <param name="name">The name of the worker.</param>
      <param name="publishMode">The publish mode of the worker, specifies if the worker is visible to remote spaces.</param>
      <param name="serviceAttributes">List of attributes of the worker, that could be interesting to services of the space.</param>
      <param name="processorAttributes">List of attributes of the processors of this worker.</param>
      <param name="isRemote">True if the worker is not local, but actually hosted by another appspace instance.</param>
      <param name="remoteAddress">The remote address of the worker, or null if the worker is local.</param>
      <param name="transportServiceName">Information about the transport service that the worker uses, or null if the worker is local.</param>
      <param name="identifier">Identifier of the worker, built out of the worker's type and name.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.Name">
      <summary>
            The name of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.IsPublished">
      <summary>
            True if the worker is published (reachable by other appspace instances).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.IsRemote">
      <summary>
            True if the worker is not local, but actually hosted by another appspace instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.RemoteAddress">
      <summary>
            The remote address of the worker, or null if the worker is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.TransportServiceName">
      <summary>
            Information about the transport service that the worker uses, or null
            if the worker is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.Identifier">
      <summary>
            Identifier of the worker, built from the worker's type and name
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.Worker">
      <summary>
            The worker instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ContractType">
      <summary>
            The contract type of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ServiceAttributes">
      <summary>
            List of attributes of the worker, that could be interesting to services of the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ProcessorAttributes">
      <summary>
            List of attributes of the processors of this worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.NumberOfConnections">
      <summary>
            The number of connections to the worker (= how many times the "ConnectWorker" method
            was called to connect to this worker).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoException">
      <summary>
            XcoException is the base class for all Exceptions thrown in XcoAppSpaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor">
      <summary>
            Creates a new XcoException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor(System.String)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">Inner Exception.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException">
      <summary>
            Exception that is thrown in case of an error related to remote communication (e.g. problems
            connecting to a remote worker).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor(System.String)">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException">
      <summary>
            Exception that is thrown when there is an error with the XcoAppSpace configuration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException.#ctor">
      <summary>
            Creates a new XcoConfigurationException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException.#ctor(System.String)">
      <summary>
            Creates a new XcoConfigurationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoPublishException">
      <summary>
            Exception that is thrown in case of an error when publishing a message (e.g. the type of message to
            be published is unknown by the XcoPublisher).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoPublishException.#ctor">
      <summary>
            Creates a new XcoPublishException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoPublishException.#ctor(System.String)">
      <summary>
            Creates a new XcoPublishException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException">
      <summary>
            Exception that is thrown when communication with a worker is not correctly authenticated or authorized.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor">
      <summary>
            Creates a new XcoSecurityException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor(System.String)">
      <summary>
            Creates a new XcoSecurityException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoSecurityException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException">
      <summary>
            Exception that is thrown in case of errors related to serialization or deserialization of messages
            that are sent to other spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor(System.String)">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException">
      <summary>
            Exception that is thrown in case of an error when subscribing to a worker (e.g. the type of message that is subscribed
            to is unknown to the XcoPublisher).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException.#ctor">
      <summary>
            Creates a new XcoSubscriptionException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException.#ctor(System.String)">
      <summary>
            Creates a new XcoSubscriptionException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException">
      <summary>
            Exception that is thrown when there is an error instantiating a worker.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException.#ctor">
      <summary>
            Creates a new XcoWorkerException.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException.#ctor(System.String)">
      <summary>
            Creates a new XcoWorkerException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.MessageTransferMode">
      <summary>
            Defines the mode for transferring messages for a certain worker port when coming from remote spaces.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.MessageTransferMode.Parallel">
      <summary>
            Messages are transferred in parallel. This provides maximal performance, but it is not guaranteed
            that the messages arrive in the order in which they are posted.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.MessageTransferMode.Sequential">
      <summary>
            Messages are transferred sequentially. This guarantees that the messages arrive exactly in the
            order in which they were posted.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoProcessorAttribute">
      <summary>
            Base class for the attributes to mark processor methods for ccr processing.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoProcessorAttribute.MessageTransferMode">
      <summary>
            The mode in which messages coming from remote spaces are transferred for this worker port.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoConcurrentAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker concurrently. (Method and fitting port
            of the worker are added to a CCR ConcurrentReceiverGroup.)
            MessageTransferMode is "Parallel" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoConcurrentAttribute.#ctor">
      <summary>
            Creates a new XcoConcurrentAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoExclusiveAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker exclusively. (Method and fitting port
            of the worker are added to a CCR ExclusiveReceiverGroup.)
            MessageTransferMode is "Sequential" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoExclusiveAttribute.#ctor">
      <summary>
            Creates a new XcoExclusiveAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoTeardownAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker. As soon as an object is processed by
            this method, all CCR ReceiverTasks that are bound to the worker's
            PortSet are shut down. (Method and fitting port of the worker are 
            added to a CCR TeardownReceiverGroup.)
            MessageTransferMode is "Parallel" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoTeardownAttribute.#ctor">
      <summary>
            Creates a new XcoTeardownAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoWorkerExtensionAttribute">
      <summary>
            Marks a class as worker extension. When creating a worker, all methods
            of a worker extension class that are marked with XcoConcurrent, XcoExclusive
            or XcoTeardown are also taken into account as message processing methods.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.#ctor">
      <summary>
            Creates a new XcoWorkerExtensionAttribute.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.#ctor(System.Type[])">
      <summary>
            Creates a new XcoWorkerExtensionAttribute.
            </summary>
      <param name="required">The list of types for which a port must exist at the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.IsTypeRequired(System.Type)">
      <summary>
            Checks if the given type is required, meaning if a Port{Type} must exist at the worker for this type.
            </summary>
      <param name="type">The type to be checked.</param>
      <returns>True if the type is required.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.Required">
      <summary>
            The list of required types (only either the required types or the optional types should be set).
            For all types in this list the worker must have a port in its contract (an exception will be thrown
            during instantiation of the worker when a port with one of these types is missing).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.Optional">
      <summary>
            The list of optional types (only either the required types or the optional types should be set).
            For these types the worker does not require to have a port, but the port will be used by the worker
            extension if it exists.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService">
      <summary>
            Service that provides ccr dispatchers and dispatcher queues for ccr task dispatching.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.#ctor">
      <summary>
            Creates a new CcrDispatcherService.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.#ctor(System.Int32)">
      <summary>
            Creates a new CcrDispatcherService.
            </summary>
      <param name="ccrThreadCount">The number of threads that should be used.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.#ctor(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Creates a new CcrDispatcherService using an external dispatcher.
            </summary>
      <param name="dispatcher">The dispatcher that should be used.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.Start">
      <summary>
            Starts the service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.Stop">
      <summary>
            Stops the service by disposing the used Dispatchers und DispatcherQueues. If an external dispatcher is used, it is not disposed.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service (does nothing in case of the CcrDispatcherService).
            </summary>
      <param name="serviceRegistry">
      </param>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.Dispatcher">
      <summary>
            The Ccr Dispatcher.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.DispatcherQueue">
      <summary>
            The Ccr DispatcherQueue used for Worker Tasks.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.InternalDispatcherQueue">
      <summary>
            The Ccr DispatcherQueue used for AppSpace-internal tasks.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.CcrDispatcherService.StartPriority">
      <summary>
            The start priority of the service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrDispatching.ConfigStringInterpreter">
      <summary>
            ConfigStringInterpreter for the CcrDispatcherService
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.CcrDispatching.ConfigStringInterpreter.Config_Ccr_Threadcount">
      <summary>
            Configuration key for the ccr thread count.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.ConfigStringInterpreter.GetService">
      <summary>
            Returns a new CcrDispatcherService, if the thread count has been set.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.CcrDispatching.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask">
      <summary>
            Base class for special Ccr tasks that can send data to a remote worker or port instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask.CreateMessage(System.Object)">
      <summary>
            Method that must be implemented by base classes to create a message
            that should be sent from an item that has been posted to the port
            where this task is registered.
            </summary>
      <param name="value">The item that has been posted.</param>
      <returns>The message that should be sent.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask.PartialClone(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Core.MessageTransferMode)">
      <summary>
            Partially clones the task, while using the given port and transfer mode.
            </summary>
      <param name="assignedPort">
      </param>
      <param name="mode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.AnonymousRemotableTask">
      <summary>
            Special Ccr task that can send data that has been posted to a port to an anonymous remote port instance
            (identified remotely by the given port guid).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.NamedRemotableTask">
      <summary>
            Special Ccr task that can send data that has been posted to a port to named remote port instance
            (a worker).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotePortInfoTask">
      <summary>
            Class that holds information about a port - is only registered at a port as receiver
            to allow accessing this information via the IPort.GetRemotableTask() extension method.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrWirer">
      <summary>
            Service for wiring workers, worker proxies and remote ports with the Ccr
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.#ctor">
      <summary>
            Creates a new CcrWirer.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Gets the ccr dispatcher service from the space's service registry, which is needed
            to activate new ccr tasks for workers, worker proxies and remote ports.
            </summary>
      <param name="serviceRegistry">The registry where the service of the space instance are registered</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.CreateWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Creates a new Worker and wires the worker ports with the message handlers contained in the worker class.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker.</typeparam>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.WireWorker``1(``0,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Wires a given worker's ports with its message handlers.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="worker">The worker instance.</param>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.CreateWorkerProxy``1(XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo)">
      <summary>
            Creates a worker proxy for a remote worker from the given parameters.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker (must have an empty constructor so it can be instantiated as a proxy).</typeparam>
      <param name="proxyInfo">Information that is needed to create the worker proxy, like name and address of the worker.</param>
      <returns>The created worker proxy.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.UnwireWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Removes all registered receiver tasks from all ports of the worker.
            </summary>
      <param name="worker">The worker that should be unwired.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets a serialization info object that contains all information that is needed by the receiving space
            to deserialize the worker. The current serialization context is used to get the local adress, and
            to register the port at the local space and get a unique id for the port, if it is not already
            a remote port.
            </summary>
      <param name="port">The port to be serialized.</param>
      <returns>Object containing the info that must be sent to the remote space for deserialization of the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.WireRemotePort(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo)">
      <summary>
            Wires a port using the given serialization info, so that it is ready for remote communication. The
            current serialization context is used to get the name of the communication service that should be
            used to send messages to the original port.
            </summary>
      <param name="port">The port to be wired.</param>
      <param name="portSerializationInfo">Info that is needed for wiring the remote port, like the port's id and remote address.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.PortHelpers">
      <summary>
            This class adds extension methods to the port that are needed at the appspace for serializing and deserializing ports,
            as well as registering remotable tasks.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.PortHelpers.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets infos that are available for this port about remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about this port.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.WorkerFactory">
      <summary>
            The WorkerFactory class is responsible for creating workers and wiring their ports to the appropriate
            message handlers.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Communication.Connector">
      <summary>
            Remote communication component for AppSpace. Handles the transport of messages
            from/to remote workers and ports.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.#ctor">
      <summary>
            Creates a new Connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the connector instance and gets all other needed services from the service registry.
            </summary>
      <param name="serviceRegistry">The service registry of the current appspace instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.IsLocal(System.String)">
      <summary>
            Checks a certain address if it is the address of the local space. This is the case if the
            address is either NULL of if it is equal (ignoring case) to the local address.
            </summary>
      <param name="address">The address to be checked.</param>
      <returns>True if the address refers to the local space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.ConnectWorker``1(System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Creates a local
            proxy of the worker that allows posting messages that are automatically transported
            to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            This method is an alternative to the method taking an URI as address, being more flexible
            and therefore allowing things like Jabber usernames to be used.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="workerAddress">The address of the worker in den form "address/workername"</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.ConnectWorker``1(System.String,System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Creates a local
            proxy of the worker that allows posting messages that are automatically transported
            to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="name">The name of the worker.</param>
      <param name="address">The address of the space where the worker is running (in form hostname:port).</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Dispose">
      <summary>
            Disposes the connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Start">
      <summary>
            Starts the connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Stop">
      <summary>
            Stops the connector.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.LocalAddress">
      <summary>
            The local address of the space (in form hostname:port).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.CommServices">
      <summary>
            The list of registered communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.Errors">
      <summary>
            Port where communication errors are posted that are not caught by causalities.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.CommunicationEvents">
      <summary>
            Events giving information about incoming and outgoing communication, e.g. for monitoring
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.StartPriority">
      <summary>
            Start priority of the connector (needs to be started before the communication services).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Communication.MessageContext">
      <summary>
            Provides information about a currently processed message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.Current">
      <summary>
            If used while processing a message from a port or worker,
            returns the MessageContext for the given message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.IsRemoteMessage">
      <summary>
            Returns true if the message was posted from a remote location, or false if it was posted locally.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.RemoteAddress">
      <summary>
            The address of the remote space, if the message was posted remotely.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.TransportServiceName">
      <summary>
            The name of the transport service with which the message has been received, if it was posted remotely.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.SessionID">
      <summary>
            The id of the session, if the message was posted to a worker remotely. The SessionID is provided by
            the security service
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.MessageContext.Username">
      <summary>
            The name of the user that posted the message, if it was posted to a worker remotely. The Username
            is provided by the security service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.DefaultInterpreters">
      <summary>
            Defines the service implementations and config string interpreters that are used by default.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.DefaultServices">
      <summary>
            Defines the service implementations and config string interpreters that are used by default.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.IXcoConfiguration">
      <summary>
            Interface definition for a configuration object that allows configuring an appspace instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.IXcoConfiguration.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service registry by adding instances for all services that are needed
            by an appspace instance.
            </summary>
      <param name="reg">The service registry that should be initalized.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.SpaceStringConfigurator">
      <summary>
            The SpaceStringConfigurator class allows to configure an appspace instance using a config string.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.SpaceStringConfigurator.CreateConfig(System.String)">
      <summary>
            Creates an XcoAppSpaceConfiguration object from the given config string, which can then be used to create a
            new appspace instance with the given configuration. An XcoConfigurationException is thrown if the config 
            string is invalid.
            </summary>
      <param name="configString">The config string for which the configuration object should be created.</param>
      <returns>The configuration that was created from the config string.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig.#ctor">
      <summary>
            Creates a new XcoAppSpaceConfiguration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig.AddService(XcoAppSpaces.Contracts.Service.IXcoService)">
      <summary>
            Adds a service to the XcoAppSpaceConfiguration instance.
            </summary>
      <param name="service">The service instance that should be added.</param>
      <returns>An XcoServiceConfiguration instance that allows further configuration of the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig.AddService(XcoAppSpaces.Contracts.Service.IXcoService,System.String,System.Boolean)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <param name="name">The name of the service.</param>
      <param name="isDefault">True if the service is the default.</param>
      <returns>An XcoServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service registry by adding instances for all services that are part of this
            XcoAppSpaceConfiguration instance. For any service that has not been configured explicitly,
            an instance of the default service for this service type is added.
            </summary>
      <param name="reg">The service registry that should be initalized.</param>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfig.CcrDispatcher">
      <summary>
            The configured ccr dispatcher instance (or null, if no special instance has been configured).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.XcoServiceConfig">
      <summary>
            Class for XcoService configurations.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoServiceConfig.AddMapping(System.Type,System.String)">
      <summary>
            Adds a mapping to another service of the given type.
            </summary>
      <param name="serviceType">The service type.</param>
      <param name="serviceName">The service name.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoServiceConfig.op_Implicit(XcoAppSpaces.Core.Configuration.XcoServiceConfig)~XcoAppSpaces.Contracts.Service.XcoServiceConfiguration">
      <summary>
            Converts an XcoServiceConfig into an XcoServiceConfiguration.
            </summary>
      <param name="config">The XcoServiceConfig.</param>
      <returns>An XcoServiceConfiguration.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfig.ServiceType">
      <summary>
            The type of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfig.Mappings">
      <summary>
            Mappings to other services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfig.ConfiguredService">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfig.Name">
      <summary>
            The name of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfig.IsDefault">
      <summary>
            True if the service is the default for this type of service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.DispatcherQueueExtensions">
      <summary>
            DispatcherQueue extension methods for simpler installation of port receivers.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.Receive``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.Receive``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveSequentially``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveSequentially``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveWithIterator``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.IteratorHandler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.Receive``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveSequentially``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called. Messages are received sequentially, meaning that the next message 
            is received only after processing of the previous one has been finished.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.Receive``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveSequentially``1(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called. Messages are received sequentially, meaning that the next message 
            is received only after processing of the previous one has been finished.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveJoined``2(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0,``1})">
      <summary>
            Receive messages from the given ports. Whenever an element is available in both ports, the given handler is called.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port1">First port from which the messages should be received.</param>
      <param name="port2">Second port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from both ports.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveJoined``2(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0,``1},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given ports. Whenever an element is available in both ports, the given handler is called.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port1">First port from which the messages should be received.</param>
      <param name="port2">Second port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from both ports.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveChoice``2(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0},Microsoft.Ccr.Core.Handler{``1})">
      <summary>
            When a messages is received from one of the given ports, the specific handler is called. The choice is taken only for
            the first element to arrive in one of the two ports.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port1">First port for the choice.</param>
      <param name="port2">Second port for the choice.</param>
      <param name="handler1">The method to be called when a message arrives in the first port.</param>
      <param name="handler2">The method to be called when a message arrives in the second port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.DispatcherQueueExtensions.ReceiveChoice``2(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0},Microsoft.Ccr.Core.Handler{``1},XcoAppSpaces.Core.SyncContext)">
      <summary>
            When a messages is received from one of the given ports, the specific handler is called. The choice is taken only for
            the first element to arrive in one of the two ports.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="dpq">The dispatcher queue.</param>
      <param name="port1">First port for the choice.</param>
      <param name="port2">Second port for the choice.</param>
      <param name="handler1">The method to be called when a message arrives in the first port.</param>
      <param name="handler2">The method to be called when a message arrives in the second port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.PortExtensions">
      <summary>
            Extensions for the IPort and Port{T} classes.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.GetPortInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Get information about the port concerning remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.TestSync``1(Microsoft.Ccr.Core.Port{``0})">
      <summary>
            Get a message from the port. If the port is currently empty wait for the next message.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <returns>The next message in the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.TestSync``1(Microsoft.Ccr.Core.Port{``0},System.Int32)">
      <summary>
            Get a message from the port. If the port is currently empty wait for the next message 
            until the given timeout. An exception is thrown if no message arrives in time.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="timeout">The maximum time to wait.</param>
      <returns>The next message in the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Handler{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionHandler register to a causality 
            for returning exceptions.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionHandler">The handler where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Handler{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionHandler register to a causality 
            for returning exceptions.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionHandler">The handler where exceptions should be returned.</param>
      <param name="coordinationPort">The port which should be registered in the causality as coordination port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">The port which should be registered in the causality as coordination port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.Send``1(Microsoft.Ccr.Core.Port{``0},``0)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.SendUnknownType(Microsoft.Ccr.Core.IPort,System.Object)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.SendWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortExtensions.SendWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Handler{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionHandler is used to register to a causality  for returning exceptions.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be sent.</param>
      <param name="exceptionHandler">The handler where exceptions should be returned.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.PortSetExtensions">
      <summary>
            Extensions for PortSet classes.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``3,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``3,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``4,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``1,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``1,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``2,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``1,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``2,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``3,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``1,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``2,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``3,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.PostWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``4,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">Port that can be used for coordination. If a Port&lt;Ack&gt; is used, an Ack is posted there when the message has been transferred successfully.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``2(Microsoft.Ccr.Core.PortSet{``0,``1},``0)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``2(Microsoft.Ccr.Core.PortSet{``0,``1},``1)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``0)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``1)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``2)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``0)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``1)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``2)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``3)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``0)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``1)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``2)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``3)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.Send``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``4)">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port set.</param>
      <param name="item">The item to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``2(Microsoft.Ccr.Core.PortSet{``0,``1},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``3(Microsoft.Ccr.Core.PortSet{``0,``1,``2},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``4(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3},``3,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``1,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``2,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``3,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.PortSetExtensions.SendWithCausality``5(Microsoft.Ccr.Core.PortSet{``0,``1,``2,``3,``4},``4,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            If the port is a remote port, this method sends the given item synchronously, meaning the method only 
            returns as soon as the item has been transferred successfully. This allows directly catching communication 
            errors, and by that ensuring that after this method the item has been transferred correctly.
            If the port is a local port, the item will simply be posted as normal.
            The given exceptionPort is used as causality.
            </summary>
      <typeparam name="T1">Message type of the port set.</typeparam>
      <typeparam name="T2">Message type of the port set.</typeparam>
      <typeparam name="T3">Message type of the port set.</typeparam>
      <typeparam name="T4">Message type of the port set.</typeparam>
      <typeparam name="T5">Message type of the port set.</typeparam>
      <param name="port">The port.</param>
      <param name="item">The item to be sent.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.ServiceRegistryExtensions">
      <summary>
            Extensions für the IXcoServiceRegistry class.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.ServiceRegistryExtensions.GetSpaceInstance(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Gets the space instance that this service registry belongs to.
            </summary>
      <param name="serviceRegistry">The service registry.</param>
      <returns>The space instance that this service registry belongs to</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.SyncContext">
      <summary>
             Using the causalities in the SynchronizationContext
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.SyncContext.NoSyncContext">
      <summary>
            No synchronization context used
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.SyncContext.UseCurrentSyncContext">
      <summary>
            SynchronizationContext.Current will be used for task execution
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoAppSpaceExtensions">
      <summary>
            XcoAppSpace extension methods for simplifying usage of the application space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveWithIterator``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.IteratorHandler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called. Messages are received sequentially, meaning that the next message 
            is received only after processing of the previous one has been finished.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Creates a port and binds it to the given handler for receiving messages. Whenever an element is posted to 
            the port, the given handler is called. Messages are received sequentially, meaning that the next message 
            is received only after processing of the previous one has been finished.
            </summary>
      <typeparam name="T">The message type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
      <returns>The created port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveJoined``2(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0,``1})">
      <summary>
            Receive messages from the given ports. Whenever an element is available in both ports, the given handler is called.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port1">First port from which the messages should be received.</param>
      <param name="port2">Second port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from both ports.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveJoined``2(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0,``1},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given ports. Whenever an element is available in both ports, the given handler is called.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port1">First port from which the messages should be received.</param>
      <param name="port2">Second port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from both ports.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveChoice``2(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0},Microsoft.Ccr.Core.Handler{``1})">
      <summary>
            When a messages is received from one of the given ports, the specific handler is called. The choice is taken only for
            the first element to arrive in one of the two ports.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port1">First port for the choice.</param>
      <param name="port2">Second port for the choice.</param>
      <param name="handler1">The method to be called when a message arrives in the first port.</param>
      <param name="handler2">The method to be called when a message arrives in the second port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.ReceiveChoice``2(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Port{``1},Microsoft.Ccr.Core.Handler{``0},Microsoft.Ccr.Core.Handler{``1},XcoAppSpaces.Core.SyncContext)">
      <summary>
            When a messages is received from one of the given ports, the specific handler is called. The choice is taken only for
            the first element to arrive in one of the two ports.
            </summary>
      <typeparam name="T1">The mesage type of port 1.</typeparam>
      <typeparam name="T2">The mesage type of port 2.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port1">First port for the choice.</param>
      <param name="port2">Second port for the choice.</param>
      <param name="handler1">The method to be called when a message arrives in the first port.</param>
      <param name="handler2">The method to be called when a message arrives in the second port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Run``1(XcoAppSpaces.Core.IXcoAppSpace,System.String,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Runs a single port with the given type.
            </summary>
      <typeparam name="T">The type of the port.</typeparam>
      <param name="space">The space.</param>
      <param name="name">The name of the port.</param>
      <param name="handler">The handler that should be executed for incoming items.</param>
      <returns>The port that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Run``1(XcoAppSpaces.Core.IXcoAppSpace,Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Runs a single port with the given type.
            </summary>
      <typeparam name="T">The type of the port.</typeparam>
      <param name="space">The space.</param>
      <param name="handler">The handler that should be executed for incoming items.</param>
      <returns>The port that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceExtensions.Connect``1(XcoAppSpaces.Core.IXcoAppSpace,System.String)">
      <summary>
            Connects to a single port with the given type.
            </summary>
      <typeparam name="T">The type of the port.</typeparam>
      <param name="space">The space.</param>
      <param name="address">The address of the port.</param>
      <returns>Proxy for posting messages to the port.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.CausalityHelpers">
      <summary>
            Helper methods for getting and setting the current causalities.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.LocalWorkerRegistry">
      <summary>
            Wrapper class for access to the local workers by the Core.Communication components.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.PortReceiveHelpers">
      <summary>
            Helpers for installing different kinds of CCR receivers on ports.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.IXcoAppSpace">
      <summary>
            Interface definition for the XcoAppSpace class, the main class of XcoAppSpaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.Resolve``1">
      <summary>
            Resolves an instance of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.Resolve``1(System.String)">
      <summary>
            Resolves worker of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <param name="name">The name of the object to retreive.</param>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(System.String)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,System.String)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace. 
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Disposes the given worker instance and removes it from the appspace.
            </summary>
      <param name="worker">The worker to be removed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker``1">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker``1(System.String)">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Info">
      <summary>
            Provides meta information about the XcoAppSpace instance, e.g. information about 
            running workers and communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Credentials">
      <summary>
            The credentials that are used by the space to connect to remote workers.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.DefaultDispatcher">
      <summary>
            The CCR dispatcher that is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.DefaultDispatcherQueue">
      <summary>
            The CCR dispatcher queue taht is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Address">
      <summary>
            The address of the space (that can be used by other spaces to connect to this space)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Errors">
      <summary>
            Port where errors are posted that occur during commmunication with Fother space instances
            and that have not been caught by causalities (e.g. errors during message deserialization 
            or security errors).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Subscribe">
      <summary>
            Non-generic base class for subscribing to events that are published by workers
            using the XcoPublisher class.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Subscribe`1">
      <summary>
            Class for Subscribing to events that are published by workers
            using the XcoPublisher class.
            </summary>
      <typeparam name="T">The type of event.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor">
      <summary>
            Creates a new Subscribe message.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.IPort)">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
    </member>
    <member name="P:XcoAppSpaces.Core.Subscribe`1.EventPort">
      <summary>
            The port that should be subscribed to to receive events.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Unsubscribe">
      <summary>
            Non-generic base class for unsubscribing from events that are published by workers
            using the XcoPublisher class.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Unsubscribe`1">
      <summary>
            Class for unsubscribing from events that are published by workers
            using the XcoPublisher class.
            </summary>
      <typeparam name="T">The type of event.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.Unsubscribe`1.#ctor(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Creates a new Unsubscribe message.
            </summary>
      <param name="eventPort">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Unsubscribe`1.#ctor(Microsoft.Ccr.Core.IPort)">
      <summary>
            Creates a new Unsubscribe message.
            </summary>
      <param name="eventPort">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Unsubscribe`1.#ctor">
      <summary>
            Creates a new Unsubscribe message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Unsubscribe`1.EventPort">
      <summary>
            The port that should be unsubscribed.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.GeneralFluentConfigExtensions">
      <summary>
            Defines general configuration extensions (which are not specific to a certain service implementation).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.GeneralFluentConfigExtensions.WithSerializer``1(XcoAppSpaces.Core.XcoFluentServiceConfig{``0},System.String)">
      <summary>
            Defines a certain serializer to be used with the given transport service.
            </summary>
      <typeparam name="T">The type of the transport service.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="serializerName">The name of the serializer to be mapped with the transport service.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.IXcoFluentConfiguration">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.Create">
      <summary>
            Creates an XcoAppSpace with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the CCR dispatcher that the XcoAppSpace should use (if not defined, the XcoAppSpace uses its own CCR dispatcher).
            </summary>
      <param name="ccrDispatcher">The CCR Dispatcher that the XcoAppSpace should use.</param>
      <returns>The given XcoAppSpaceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.UsingService``1(``0)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.UsingService``1">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown. A new service of the given type is instantiated. The given type
            must have a parameterless constructor.
            </summary>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoFluentAppSpaceConfig">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.#ctor(System.String)">
      <summary>
            Creates a new XcoAppSpaceConfig using a given config string.
            </summary>
      <param name="configString">The config string that should be used.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.#ctor">
      <summary>
            Creates a new XcoAppSpaceConfig.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.Create">
      <summary>
            Creates an XcoAppSpace with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the CCR dispatcher that the XcoAppSpace should use (if not defined, the XcoAppSpace uses its own CCR dispatcher).
            </summary>
      <param name="ccrDispatcher">The CCR Dispatcher that the XcoAppSpace should use.</param>
      <returns>The given XcoAppSpaceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.UsingService``1(``0)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.UsingService``1">
      <summary>
            Defines a certain service instance that should be used by the space. A new service of the given 
            type is instantiated. The given type must have a parameterless constructor.
            </summary>
      <typeparam name="TS">The type of the service.</typeparam>
      <returns>A configuration object that can be used to configure this service instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.op_Implicit(XcoAppSpaces.Core.XcoFluentAppSpaceConfig)~XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            Creates an XcoAppSpace instance from the given configuration object.
            </summary>
      <param name="config">The configuration object.</param>
      <returns>The created XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentAppSpaceConfig.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes a service registry instance by adding all services that are configured in 
            this XcoAppSpaceConfig instance.
            </summary>
      <param name="reg">The service registry that should be initialized.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoFluentServiceConfig`1">
      <summary>
            Fluent interface for creating an XcoAppSpace and configuring a communication service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.WithName(System.String)">
      <summary>
            Defines the name of the service. (The name must be unique among all service
            instances of the same type, e.g. among all transport services.)
            </summary>
      <param name="name">The name of the communication service.</param>
      <returns>The given XcoServiceConfig instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.AsDefault">
      <summary>
            Defines the service to be the default for the space.
            </summary>
      <returns>The given XcoServiceConfig instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.Create">
      <summary>
            Creates a new XcoAppSpace instance with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the ccr dispatcher instance that should be used by the space.
            </summary>
      <param name="ccrDispatcher">The ccr dispatcher instance.</param>
      <returns>The given configuration object for further configuration of the space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.UsingService``1(``0)">
      <summary>
            Defines a certain service instance that should be used by the space.
            </summary>
      <typeparam name="TS">The type of the service.</typeparam>
      <param name="service">The service instance.</param>
      <returns>A configuration object that can be used to configure this service instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.UsingService``1">
      <summary>
            Defines a certain service instance that should be used by the space. A new service of the given 
            type is instantiated. The given type must have a parameterless constructor.
            </summary>
      <typeparam name="TS">The type of the service.</typeparam>
      <returns>A configuration object that can be used to configure this service instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoFluentServiceConfig`1.op_Implicit(XcoAppSpaces.Core.XcoFluentServiceConfig{`0})~XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            Operator that creates an XcoAppSpace instance from the given configuration object.
            </summary>
      <param name="config">The configuration object.</param>
      <returns>The created XcoAppSpace instance.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoFluentServiceConfig`1.Service">
      <summary>
            The service that is getting configured.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoFluentServiceConfig`1.ServiceConfig">
      <summary>
            Additional service configuration information like service name and mappings.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoFluentServiceConfig`1.FluentConfig">
      <summary>
            The configuration itself.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoSpaceInfo">
      <summary>
            Class that presents meta information about the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.Workers">
      <summary>
            Information about the workers of this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.ServiceRegistry">
      <summary>
            The service registry of the space, allowing access to all its running services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.TransportServices">
      <summary>
            Information about the communication services of this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.SecurityService">
      <summary>
            The security service that is used by this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.CommunicationEvents">
      <summary>
            Events giving information about incoming and outgoing communication, e.g. for monitoring
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            The main class of XcoAppSpaces. XcoAppSpace represents the application space
            and allows running workers, as well as resolving worker that have already been
            started and connecting to workers running at a remote space. It also provides
            basic dependency injection container functionality.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor">
      <summary>
            Creates a new XcoAppSpace without remote communication functionality.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor(System.String)">
      <summary>
            Creates a new XcoAppSpace by using the given config string.
            </summary>
      <param name="configString">The config string to configure the appspace instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor(XcoAppSpaces.Core.Configuration.IXcoConfiguration)">
      <summary>
            Creates a new XcoAppSpace by using the given configuration.
            </summary>
      <param name="config">
      </param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Resolve``1">
      <summary>
            Resolves an instance of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Resolve``1(System.String)">
      <summary>
            Resolves worker of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <param name="name">The name of the object to retreive.</param>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(System.String)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publishMode">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,System.String)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace. 
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Disposes the given worker instance and removes it from the appspace.
            </summary>
      <param name="worker">The worker to be removed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker``1">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker``1(System.String)">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publishMode">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Dispose">
      <summary>
            Closes the appspace and disposes the CCR dispatcher if it was not handed in at startup.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConfigureWithConfigString(System.String)">
      <summary>
            Initializes the XcoAppSpace using the given config string.
            </summary>
      <param name="configString">The config string that should be used for initialization of the space.</param>
      <returns>An XcoAppSpaceConfiguration instance for further configuration of the space.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Info">
      <summary>
            Provides meta information about the XcoAppSpace instance, e.g. information about 
            running workers and communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Credentials">
      <summary>
            The credentials that are used by the space to connect to remote workers.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.DefaultDispatcher">
      <summary>
            The CCR dispatcher that is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.DefaultDispatcherQueue">
      <summary>
            The CCR dispatcher queue that is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Address">
      <summary>
            The address of the space (that can be used by other spaces to connect to this space)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Errors">
      <summary>
            Port where errors are posted that occur during commmunication with other space instances
            and that have not been caught by causalities (e.g. errors during message deserialization 
            or security errors).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Configure">
      <summary>
            Returns an XcoAppSpaceConfig object for configuring and creating a new space instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher">
      <summary>
            The XcoPublisher manages a list of subscriptions in form of ports. It handles the
            processing of Subscribe and Unsubscribe messages, and the publishing messages
            to all subscribed ports.
            Is the base class for all generic XcoPublisher classes.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher.PublishUnknownType(System.Object)">
      <summary>
            Tries to publish a message of unknown type. An exception is thrown if the type
            of message is not supported by the XcoPublisher instance.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher.PublishWithType``1(``0)">
      <summary>
            Tries to publish a message with the given type. An exception is thrown if the type
            of message is not supported by the XcoPublisher instance.
            </summary>
      <param name="msg">The message to be published.</param>
      <typeparam name="T">The type under which the message should be published (msg must be assignable to this type).</typeparam>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`1">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T">The type of message to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`2">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`3">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`4">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
      <typeparam name="T3">The fourth message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`3)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`5">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
      <typeparam name="T3">The fourth message type to be published.</typeparam>
      <typeparam name="T4">The fifth message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`3)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`4)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`4})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`4})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoTimedAction">
      <summary>
            Represents a timed action that is executed with a ccr timer port.
            Call Invoke() or InvokeDelayed() to start the timed action.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoTimedAction.Continuation">
      <summary>
            Continuation action for the timed action.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoTimedAction.Invoke">
      <summary>
            Asynchronously starts the timer without delay.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoTimedAction.InvokeDelayed">
      <summary>
            Asynchonously starts the timer, using the predefined timer interval as delay.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoTimedAction.Dispose">
      <summary>
            Disposes the XcoTimedAction.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Security.Basic.PasswordUtil">
      <summary>
            Utility class for encrypting passwords and comparing two encrypted passwords.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.PasswordUtil.CreatePasswordHash(System.String)">
      <summary>
            Creates a hash for the given password string using SHA512 algorithm.
            </summary>
      <param name="password">The password string to hash.</param>
      <returns>The hash value.</returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.PasswordUtil.AreEqual(System.Byte[],System.Byte[])">
      <summary>
            Compares two hashes, returns true if they are equal.
            </summary>
      <param name="pw1">First hash.</param>
      <param name="pw2">Second hash.</param>
      <returns>true if the hashes are equal.</returns>
    </member>
    <member name="T:XcoAppSpaces.Security.Basic.XcoNoSecurityService">
      <summary>
            Security Service that just permits all actions.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.Authenticate(System.String,XcoAppSpaces.Contracts.Security.IXcoClientCredentials)">
      <summary>
            Authenticates the given user and address. Allows all users as authenticated and returns an empty session id.
            </summary>
      <param name="address">
      </param>
      <param name="credentials">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.Authorize(System.String,System.Guid,Microsoft.Ccr.Core.IPort)">
      <summary>
            Authorizes a given user to access a given worker. Always returns true.
            </summary>
      <param name="address">
      </param>
      <param name="sessionID">
      </param>
      <param name="worker">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.CheckPermission(Microsoft.Ccr.Core.IPort,System.Object,System.String,System.Guid)">
      <summary>
            Checks for permission to access the worker port for the given message type. Permission is always granted,
            a SecurityException is never thrown.
            </summary>
      <param name="worker">
      </param>
      <param name="message">
      </param>
      <param name="address">
      </param>
      <param name="sessionID">
      </param>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.GetClientCredentials(System.Net.ICredentials,System.String)">
      <summary>
            Creates an XcoBasicClientCredentials object for the given client credentials. This works
            the same way as in the XcoBasicSecurityService, so that XcoAppSpace instances with no
            security can communicate with spaces using the XcoBasicSecurityService without any special
            configuration.
            </summary>
      <param name="credentials">The ICredentials that have been set for the local space instance.</param>
      <param name="address">The address for which a user is needed.</param>
      <returns>An XcoBasicClientCredentials instance according to the given credentials.</returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.GetUsername(System.Guid)">
      <summary>
            Gets the username for the given session id.
            </summary>
      <param name="sessionID">The id of the session for which the user should be retrieved.</param>
      <returns>The username for the given session, or null if no user is applied to this session.</returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.Start">
      <summary>
            Starts the service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.Stop">
      <summary>
            Stops the service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.XcoNoSecurityService.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service.
            </summary>
      <param name="serviceRegistry">
      </param>
    </member>
    <member name="P:XcoAppSpaces.Security.Basic.XcoNoSecurityService.StartPriority">
      <summary>
            The start priority of the service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Serialization.Json.XcoJsonSerializer">
      <summary>
            XcoJsonSerializer serializes and desrializes messages in the Json format, making serialization
            plattform independent.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Json.XcoJsonSerializer.AddSurrogate(BruteForceSerializer.Contract.ISerializationSurrogate)">
      <summary>
            Adds a serialization surrogate to the serializer, that can be used to define special serialization
            mechanisms for certain types.
            </summary>
      <param name="surrogate">The surrogate to be added.</param>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Json.XcoJsonSerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Json.XcoJsonSerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Json.XcoJsonSerializer.CanTypeBeSerialized(System.Type,System.String@)">
      <summary>
            Checks if the given type can be serialized. In case of the Json serializer, types must be
            public and have an empty default constructor.
            </summary>
      <param name="type">The type to be checked.</param>
      <param name="errorInfo">Contains information about serialization problems, if the type cannot be serialized.</param>
      <returns>True if the type can be serialized, otherwise false.</returns>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Json.XcoJsonSerializer.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service.
            </summary>
      <param name="serviceRegistry">The service registry of the local space.</param>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter">
      <summary>
            Configuration string interpreter for the XcoTCPTransportService.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigPort">
      <summary>
            Config key for setting the port.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigLifetime">
      <summary>
            Config key for setting the connection lifetime (format: mm:ss).
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigName">
      <summary>
            Config key for setting the name.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigIsDefault">
      <summary>
            Config key for setting if the service is the default communication service.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigAuthKey">
      <summary>
            Config key for setting the authentication key.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.GetService">
      <summary>
            Get the current tcp service
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions">
      <summary>
            Defines extension methods for configuration of an XcoTCPTransportService using the fluent interface.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions.WithConnectionLifetime``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.Sockets.XcoTCPTransportService,``0},System.TimeSpan)">
      <summary>
            Configures the connection lifetime (time after which a connection is closed when no messages are sent or received). 
            The default value is 1 minute. For some scenarios it can make sense to leave connections open for a longer time span 
            to reduce the need for sending messages just to keep the connection alive.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="lifetime">The connection life time.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions.WithAuthenticationKey``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.Sockets.XcoTCPTransportService,``0},System.String)">
      <summary>
            Defines a key that should be used for authentication of incoming connections.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="authenticationKey">Key that should be used for authentication of incoming connections.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.TransferHelper">
      <summary>
             Helperclass for XcoMessage convert for transfer
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.#ctor">
      <summary>
             Helper class for XcoMessages converts
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.Convert(XcoAppSpaces.Contracts.Transport.XcoMessage,System.String)">
      <summary>
            Converts the XcoMessage to a byte[]
            </summary>
      <param name="msg">XcoMessage to convert</param>
      <param name="localAddress">The local address of the transport service.</param>
      <returns>byte[] instance of the XcoMessage</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.Convert(System.IO.BinaryReader,System.String@,System.Action,System.Action{System.Exception})">
      <summary>
            Convert byte[] to XcoMessage
            </summary>
      <param name="stream">read XcoMessage from stream</param>
      <param name="remoteAddress">Address of the space where the message came from.</param>
      <param name="handleEmptyData">Action that should be called when data is empty</param>
      <param name="handleError">Action that should be called when an error is encountered</param>
      <returns>new XcoMessage instance</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.ReadData(System.IO.BinaryReader,System.Int32,System.Byte[]@)">
      <summary>
            Read data from stream
            </summary>
      <param name="stream">
      </param>
      <param name="gesamtLen">
      </param>
      <param name="content">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.DebugLogger">
      <summary>
            Logger that does nothing - replaces TraceSourceLogger for because TraceSource is not available for Silverlight.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.NullLogger">
      <summary>
            Logger that does nothing - replaces TraceSourceLogger for CF because TraceSource is not available there.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory">
      <summary>
            Factory for creating Loggers. (Logger factory is needed because the different
            components within the appspace require loggers with different names and types,
            so adding a single logger instance to the space is not sufficient.)
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory.CreateInstanceDefault">
      <summary>
            Default function for creating a new IXcoLogger Instance. Returns a new TraceSourceLogger instance with output level set to "Error".
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory.CreateInstance">
      <summary>
            Function for creating a new IXcoLogger Instance. Can be overwritten.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.Auth.TcpClient">
      <summary>
            Wrapper class for socket connection, so that the same interfaces can be used as in the full framework code.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService">
      <summary>
            Communication Service that send/receives messages to/from remote spaces via TCP sockets.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.#ctor">
      <summary>
            Creates a new XcoTCPTransportService.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the transport service.
            </summary>
      <param name="serviceRegistry">Service registry with other services of the space instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Start">
      <summary>
            Starts the communication service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Stop">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.ReleaseConnections">
      <summary>
            Releases all currently active connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage,System.String)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The message that should be sent.</param>
      <param name="remoteAddress">The address where the message should be sent to.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.CheckConnectionTimeouts">
      <summary>
            Checks if any connections have run into a timeout (not sent or received any message for a 
            defined amount of time), and removes and closes these connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Dispose">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.SecuritySettings">
      <summary>
            Security Settings that are used when establishing a connection
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.LocalAddress">
      <summary>
            The Address of the server.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.ConnectionLifetime">
      <summary>
            The time until a connect is closed when it has not been used (meaning not messages have been sent or received).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.ActiveConnections">
      <summary>
            Returns a list of addresses to which there are currently active tcp connections.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.StartPriority">
      <summary>
            Start priority of the service.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.OnMessageReceived">
      <summary>
            Event that is raised when messages are received.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.NonSerializedAttribute">
      <summary>
            Placeholder for NonSerialized attribute since it doesn't exist in Silverlight.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.SerializableAttribute">
      <summary>
            Placeholder for Serializable attribute since it doesn't exist in Silverlight.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current Json token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how the output is formatted.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor then fall back to single paramatized constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Allow Json.NET to use a non-public default constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode">
      <summary>
            Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Local">
      <summary>
            The time represented is local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Utc">
      <summary>
            The time represented is UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Unspecified">
      <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.RoundtripKind">
      <summary>
            Preserves the DateTimeKind field of a date when a DateTime object is converted to a string and the string is then converted back to a DateTime object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object reference data.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the specified object to a Json object.
            </summary>
      <param name="value">The object to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the specified object to a Json object.
            </summary>
      <param name="value">The object to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the specified object to a Json object.
            </summary>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <param name="value">The object to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the specified JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON string to the specified type.
            </summary>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON string to the specified type.
            </summary>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON string to the specified type.
            </summary>
      <param name="value">The object to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON string to the specified type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An interger.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All members are serialized by default. Members can be excluded using the <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> are serialized.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.SerializationBinder">
      <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.SerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(Newtonsoft.Json.Serialization.JsonObjectContract)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" />.
            </summary>
      <param name="contract">The contract to create properties for.</param>
      <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(Newtonsoft.Json.Serialization.JsonObjectContract,System.Reflection.MemberInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="contract">The member's declaring types <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator.
            </summary>
      <value>The default creator.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether [default creator non public].
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(Newtonsoft.Json.Serialization.JsonObjectContract)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="contract">The contract.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
      <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
      <param name="list">The list.</param>
      <returns>
        <c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
      <param name="list">The list.</param>
      <param name="start">The start index.</param>
      <param name="end">The end index.</param>
      <returns>A slice of the list.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
      <param name="list">The list.</param>
      <param name="start">The start index.</param>
      <param name="end">The end index.</param>
      <param name="step">The step.</param>
      <returns>A slice of the list.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},System.Func{``1,``0})">
      <summary>
            Group the collection using a function which returns the key.
            </summary>
      <param name="source">The source collection to group.</param>
      <param name="keySelector">The key selector.</param>
      <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert``1(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,``0@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert``1(System.Object,System.Globalization.CultureInfo,``0@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert or cast the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast``1(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert or cast the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <returns>The converted type. If conversion was unsuccessful, the initial value is returned if assignable to the target type</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,``0@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast``1(System.Object,System.Globalization.CultureInfo,``0@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <typeparam name="T">The type to convert the value to.</typeparam>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully or is assignable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String)">
      <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
      <param name="enumMemberName">Name of the enum member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.Parse``1(System.String,System.Boolean)">
      <summary>
            Parses the specified enum member name, returning it's value.
            </summary>
      <param name="enumMemberName">Name of the enum member.</param>
      <param name="ignoreCase">If set to <c>true</c> ignore case.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``2">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetMaximumValue``1(System.Type)">
      <summary>
            Gets the maximum valid value of an Enum type. Flags enums are ORed.
            </summary>
      <typeparam name="TEnumType">The type of the returned value. Must be assignable from the enum's underlying value type.</typeparam>
      <param name="enumType">The enum type to get the maximum value for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
      <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
      <param name="list">The list.</param>
      <returns>Whether the list's items are their unitialized value</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
      <summary>
            Determines whether the string contains white space.
            </summary>
      <param name="s">The string to test for white space.</param>
      <returns>
        <c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
      <summary>
            Ensures the target string ends with the specified string.
            </summary>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
      <returns>The target string with the value string at the end.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
      <summary>
            Perform an action if the string is not null or empty.
            </summary>
      <param name="value">The value.</param>
      <param name="action">The action to perform.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="s">The string to indent.</param>
      <param name="indentation">The number of characters to indent by.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="s">The string to indent.</param>
      <param name="indentation">The number of characters to indent by.</param>
      <param name="indentChar">The indent character.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
      <summary>
            Numbers the lines.
            </summary>
      <param name="s">The string to number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation event.
            </summary>
      <value>The JsonSchemaException associated with the validation event.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation event.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Optional">
      <summary>
            Gets or sets whether the object is optional.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumDecimals">
      <summary>
            Gets or sets the maximum decimals.
            </summary>
      <value>The maximum decimals.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Identity">
      <summary>
            Gets or sets the identity.
            </summary>
      <value>The identity.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Options">
      <summary>
            Gets or sets a collection of options.
            </summary>
      <value>A collection of options.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the extend <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
      <value>The extended <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
  </members>
</doc>